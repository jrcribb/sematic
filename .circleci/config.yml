# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0
  slack: circleci/slack@4.9.3
  codecov: codecov/codecov@3.2.3
  node: circleci/node@5.0.3

commands:
  install-ci-pip-deps:
    description: Install CI pip deps
    steps:
      - python/install-packages:
          pkg-manager: pip
          app-dir: ~/project/requirements  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: ci-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
  install-npm-dependencies:
    description: Install NPM dependencies in the UI folder
    steps:
      - node/install-packages:
          app-dir: ./sematic/ui

  installation-tests:
    description: Do a test of installing sematic via wheel
    steps:
      - run:
          name: Build wheel
          command: |
            PATH="$PATH:$CIRCLE_WORKING_DIRECTORY/.circleci/"
            retry 5 make wheel
      - run:
          name: "Move wheel"
          command: mkdir dist && mv bazel-bin/sematic/sematic-*.whl dist
      - run:
          name: Test pip install
          command: bazel run //sematic/tests/integration:test_pip_install

  
  notify-completion:
    description: Send a notification to Slack about job completion
    steps:
      - slack/notify:
          event: always

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  init:
    docker:
      - image: $SEMATIC_CI_IMAGE
        auth:
            username: $SEMATIC_DOCKERHUB_USER
            password: $SEMATIC_DOCKERHUB_PASSWORD
    steps:
      - checkout
      - install-ci-pip-deps
      - install-npm-dependencies
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - .pyenv
            - .cache/Cypress
            - project

  installation:
    docker:
      - image: $SEMATIC_CI_IMAGE
        auth:
            username: $SEMATIC_DOCKERHUB_USER
            password: $SEMATIC_DOCKERHUB_PASSWORD
    steps:
      - attach_workspace:
          at: /home/circleci
      - installation-tests
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project/CIVENV
    environment:
      CI_VENV_NAME: CIVENV
      REACT_APP_IS_CIRCLE_CI: 1
    
  
  integration-test:
    docker:
      - image: $SEMATIC_CI_IMAGE
        auth:
            username: $SEMATIC_DOCKERHUB_USER
            password: $SEMATIC_DOCKERHUB_PASSWORD
    steps:
      - attach_workspace:
          at: /home/circleci
      - run: 
          name: Create a run
          command: source ./CIVENV/bin/activate && sematic start && sematic run examples/add
      - run:
          name: Run Cypress Integration test
          working_directory: ./sematic/ui
          command: npm run cypress:e2e
      - run:
          name: Stop Sematic
          working_directory: ~/project
          command: source ./CIVENV/bin/activate && sematic stop
      - store_artifacts:
          path: ~/project/sematic/ui/tests/cypress_video
      - store_artifacts:
          path: ~/project/sematic/ui/tests/cypress_screenshots
      - store_test_results:
          path: ~/project/sematic/ui/tests/cypress_results
  
  fe-unit-tests:
    docker:
      - image: $SEMATIC_CI_IMAGE
        auth:
            username: $SEMATIC_DOCKERHUB_USER
            password: $SEMATIC_DOCKERHUB_PASSWORD
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: Run Cypress Component test
          working_directory: ./sematic/ui
          command: npm run cypress:component
      - store_artifacts:
          path: ~/project/sematic/ui/tests/cypress_video
      - store_artifacts:
          path: ~/project/sematic/ui/tests/cypress_screenshots
      - store_test_results:
          path: ~/project/sematic/ui/tests/cypress_results
      
  finalize:
    docker:
      - image: cimg/base:2023.01
    steps:
      - notify-completion

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sematic-test:
    jobs:
      - init
      - installation:
          requires:
            - init
      - integration-test:
          requires:
            - installation
      - fe-unit-tests:
          requires:
            - init
      - finalize:
          requires:
            - integration-test
            - fe-unit-tests
